set -e

# Builds a MacroPaw UF2 image from the CircuitPython base image,
# a KMK tarfile, and firmware files in a local directory.

cd $(dirname $0)

# Usage: build-uf2 board-id base-dir

BOARD_ID="$1"
BASE_DIR="$2"
VOLNAME="${3:-MACROPAW}"

echo "Building UF2 for $BOARD_ID ($VOLNAME) in $BASE_DIR..."

TOOLS=${BASE_DIR}/tools
BASE_FIRMWARE=${TOOLS}/base-firmware-${BOARD_ID}.uf2
KMK_TARFILE=${TOOLS}/kmk-tarfile.tgz

TMP=${TMPDIR:-/tmp}

# MACROPAW_IMG is the output file.
MACROPAW_IMG=${BASE_DIR}/macropaw-${BOARD_ID}.uf2

# WORK_IMAGE is the temporary image we work from.
WORK_IMAGE=$TMP/macropaw.img

if ! command -v mkfs.vfat >/dev/null 2>&1; then
    echo "Please install mkfs.vfat, or edit PATH to include it." >&2
    exit 1
fi

if [ $(uname -s) == "Darwin" ]; then
    echo "==== Setting up for MacOS..."

    # Set up for MacOS. !*@&#!*& portability issues...
    MOUNTPOINT=/Volumes/uf2-work

    # Make sure things are OK.
    if [ -d $MOUNTPOINT ]; then
        echo "Please unmount $MOUNTPOINT and run again." >&2
        exit 1
    fi

    mount_image () {
        hdiutil attach "$1" -mountpoint "$2" >/dev/null
    }

    umount_image () {
        hdiutil eject "$1" >/dev/null
    }
else
    echo "==== Setting up for Linux..."

    # Set up for Linux. !*@&#!*& portability issues...
    MOUNTPOINT=$TMP/uf2-work

    echo "We need to run mount with sudo; you might need to enter your password."

    if [ ! -d $MOUNTPOINT ]; then
        mkdir $MOUNTPOINT
    fi

    mount_image () {
        sudo mount -o loop,uid=$UID "$1" "$2"
    }

    umount_image () {
        sudo umount "$1"
    }
fi

# OK, once here, we should have MOUNTPOINT set, and mount_image and
# umount_image should work.
#
# Start by shredding and reinitializing $WORK_IMAGE.

echo "==== Mounting work volume..."

rm -f $WORK_IMAGE
dd if=/dev/zero of=$WORK_IMAGE bs=1M count=8 2>/dev/null

mkfs.fat -n "$VOLNAME" -m - $WORK_IMAGE >/dev/null <<EOF
This is not a bootable disk; it contains firmware for the
Kodachi 6 14 $BOARD_ID keyboard. Please don't try to boot it.
EOF

mount_image "$WORK_IMAGE" "$MOUNTPOINT"

echo "==== Populating MacroPaw filesystem..."

# This is a bunch of metadata stuff for MacOS.
touch $MOUNTPOINT/.metadata_never_index
touch $MOUNTPOINT/.Trashes

if [ ! -d $MOUNTPOINT/.fseventsd ]; then
    mkdir $MOUNTPOINT/.fseventsd
fi

touch $MOUNTPOINT/.fseventsd/no_log

# At Some Point, we'll probably use mpy-cross to freeze all this stuff, but
# for now, we just copy it all over.
#
# Start by copying common code for all boards. This includes a lib/ directory.
cp -pr ${BASE_DIR}/common/* $MOUNTPOINT

# Next, copy the board-specific MacroPaw code.
cp -pr ${BASE_DIR}/${BOARD_ID}/firmware/* $MOUNTPOINT

# After that, copy the base KMK firmware into lib/kmk.
mkdir $MOUNTPOINT/lib/kmk

( cd $MOUNTPOINT/lib/kmk ; \
  tar xz --no-same-owner --exclude __pycache__ --file ${KMK_TARFILE} )

# Finally, arrange for the MacroPaw to enter hardware test on first boot.
touch $MOUNTPOINT/firstboot

echo "==== Unmounting work volume..."

sync
sleep 1
sync
sleep 1
sync
umount_image "$MOUNTPOINT"

echo "==== Building UF2..."

python3 ${TOOLS}/mkuf2.py \
    "${BASE_FIRMWARE}" \
    0x10100000:$WORK_IMAGE \
    > ${MACROPAW_IMG}

echo "==== Done!"

